JavaScript ‡§Æ‡•á‡§Ç .this, .then() ‡§î‡§∞ ‡§¶‡•Ç‡§∏‡§∞‡•á Keywords ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?
JavaScript ‡§Æ‡•á‡§Ç .this, .then(), ‡§î‡§∞ ‡§¶‡•Ç‡§∏‡§∞‡•á Keywords ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó Concepts ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§ö‡§≤‡•ã ‡§è‡§ï-‡§è‡§ï ‡§ï‡§∞‡§ï‡•á ‡§á‡§® ‡§∏‡§≠‡•Ä ‡§ï‡•ã Detail ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç‡•§

1Ô∏è‚É£ this ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?
‚úÖ Real-Life Example: Self-Identity (‡§Æ‡•à‡§Ç ‡§ï‡•å‡§® ‡§π‡•Ç‡§Ç?)
Imagine ‡§ï‡§∞‡•ã ‡§ï‡§ø ‡§§‡•Å‡§Æ ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•á ‡§ò‡§∞ ‡§ó‡§è ‡§π‡•ã ‡§î‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§®‡•á ‡§§‡•Å‡§Æ‡§∏‡•á ‡§™‡•Ç‡§õ‡§æ:

"Who are you?" (‡§§‡•Å‡§Æ ‡§ï‡•å‡§® ‡§π‡•ã?)

‡§§‡•Å‡§Æ‡§æ‡§∞‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§π‡•ã‡§ó‡§æ: "‡§Æ‡•à‡§Ç [‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ ‡§®‡§æ‡§Æ] ‡§π‡•Ç‡§Ç‡•§"
‡§™‡§∞ ‡§Ö‡§ó‡§∞ ‡§§‡•Å‡§Æ ‡§Ö‡§™‡§®‡•á ‡§ò‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡•ã ‡§î‡§∞ ‡§ï‡•ã‡§à ‡§™‡•Ç‡§õ‡•á, ‡§§‡§¨ ‡§≠‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§µ‡§π‡•Ä ‡§∞‡§π‡•á‡§ó‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ú‡§ó‡§π ‡§¨‡§¶‡§≤ ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§

‡§†‡•Ä‡§ï ‡§á‡§∏‡•Ä ‡§§‡§∞‡§π, JavaScript ‡§Æ‡•á‡§Ç this ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ Object ‡§ï‡•á Context ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§¨‡§¶‡§≤‡§§‡§æ ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§

‚úÖ Example 1: Normal Function ‡§Æ‡•á‡§Ç this (Global Context)
javascript
Copy
Edit
console.log(this); // Browser ‡§Æ‡•á‡§Ç ‡§Ø‡§π `window` Object ‡§ï‡•ã Print ‡§ï‡§∞‡•á‡§ó‡§æ
‚úî Global Scope ‡§Æ‡•á‡§Ç this, window Object ‡§ï‡•ã Refer ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

‚úÖ Example 2: Object ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ this
javascript
Copy
Edit
const person = {
  name: "John",
  getName: function () {
    return this.name; // `this` refers to `person` object
  },
};

console.log(person.getName()); // Output: John
‚úî ‡§Ø‡§π‡§æ‡§Å this, person Object ‡§ï‡•ã Refer ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§

‚úÖ Example 3: Arrow Function ‡§Æ‡•á‡§Ç this (Lexical Scope)
javascript
Copy
Edit
const person = {
  name: "Alice",
  getName: () => {
    console.log(this.name);
  },
};

person.getName(); // Output: undefined
‚ùå Arrow Function ‡§Æ‡•á‡§Ç this, Parent Scope (Global Object) ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è Output undefined ‡§π‡•ã‡§ó‡§æ‡•§

2Ô∏è‚É£ .then() ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?
‚úÖ Real-Life Example: Online Order (Promise Concept)
Imagine ‡§ï‡§∞‡•ã ‡§ï‡§ø ‡§§‡•Å‡§Æ‡§®‡•á Amazon ‡§∏‡•á ‡§è‡§ï Mobile Order ‡§ï‡§ø‡§Ø‡§æ‡•§

‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§¶‡•ã Possible Outcomes ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:

Order Successful ‚Üí ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç Mobile ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§è‡§ó‡§æ ‚úÖ
Order Failed ‚Üí ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç Refund ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ ‚ùå
JavaScript ‡§Æ‡•á‡§Ç Promise ‡§≠‡•Ä ‡§ê‡§∏‡•á ‡§π‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ ‡§ú‡§¨ API Call ‡§Ø‡§æ ‡§ï‡•ã‡§à Async Task ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã .then() ‡§î‡§∞ .catch() ‡§â‡§∏‡•á Handle ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

‚úÖ Example 1: Basic then() Example
javascript
Copy
Edit
const myPromise = new Promise((resolve, reject) => {
  let success = true; // ‡§á‡§∏‡•á false ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ Reject ‡§π‡•ã‡§ó‡§æ
  setTimeout(() => {
    if (success) {
      resolve("Order Delivered! ‚úÖ");
    } else {
      reject("Order Failed! ‚ùå");
    }
  }, 2000);
});

myPromise
  .then((message) => {
    console.log("Success:", message);
  })
  .catch((error) => {
    console.log("Error:", error);
  });
‚úî ‡§Ö‡§ó‡§∞ Promise Resolve ‡§π‡•ã‡§ó‡§æ, ‡§§‡•ã .then() Execute ‡§π‡•ã‡§ó‡§æ‡•§
‚úî ‡§Ö‡§ó‡§∞ Promise Reject ‡§π‡•ã‡§ó‡§æ, ‡§§‡•ã .catch() Execute ‡§π‡•ã‡§ó‡§æ‡•§

‚úÖ Example 2: API Call using fetch() with .then()
javascript
Copy
Edit
fetch("https://jsonplaceholder.typicode.com/users")
  .then((response) => response.json()) // JSON ‡§Æ‡•á‡§Ç Convert ‡§ï‡§∞‡§®‡§æ
  .then((data) => console.log(data)) // Data Print ‡§ï‡§∞‡§®‡§æ
  .catch((error) => console.error("Error fetching data:", error)); // Error Handle ‡§ï‡§∞‡§®‡§æ
‚úî ‡§π‡§∞ .then() Previous Promise ‡§ï‡•á Resolve ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ Execute ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

3Ô∏è‚É£ call(), apply(), ‡§î‡§∞ bind()
‚úÖ Real-Life Example: Borrowing Someone‚Äôs Car
‡§§‡•Å‡§Æ‡§®‡•á ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§∏‡•á ‡§ï‡§æ‡§∞ ‡§â‡§ß‡§æ‡§∞ ‡§≤‡•Ä, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ö‡§¨ ‡§§‡•Å‡§Æ ‡§ñ‡•Å‡§¶ ‡§â‡§∏‡•á ‡§ö‡§≤‡§æ ‡§∞‡§π‡•á ‡§π‡•ã‡•§
‡§†‡•Ä‡§ï ‡§á‡§∏‡•Ä ‡§§‡§∞‡§π, JavaScript ‡§Æ‡•á‡§Ç call(), apply(), ‡§î‡§∞ bind() ‡§ï‡§ø‡§∏‡•Ä Object ‡§ï‡§æ Method ‡§¶‡•Ç‡§∏‡§∞‡•á Object ‡§Æ‡•á‡§Ç Use ‡§ï‡§∞‡§®‡•á ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§

‚úÖ Example 1: call()
javascript
Copy
Edit
const person1 = { name: "Alice" };
const person2 = { name: "Bob" };

function greet() {
  console.log("Hello, " + this.name);
}

greet.call(person1); // Output: Hello, Alice
greet.call(person2); // Output: Hello, Bob
‚úî ‡§Ø‡§π‡§æ‡§Ç ‡§π‡§Æ‡§®‡•á greet() Function ‡§ï‡•ã person1 ‡§î‡§∞ person2 Objects ‡§ï‡•á ‡§∏‡§æ‡§• Borrow ‡§ï‡§ø‡§Ø‡§æ‡•§

‚úÖ Example 2: apply() (Same as call() but with Array Arguments)
javascript
Copy
Edit
function introduce(age, city) {
  console.log(`I am ${this.name}, ${age} years old from ${city}.`);
}

introduce.apply(person1, [25, "New York"]); // Output: I am Alice, 25 years old from New York.
‚úî ‡§Ø‡§π call() ‡§ú‡•à‡§∏‡§æ ‡§π‡•Ä ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® Arguments ‡§ï‡•ã Array ‡§Æ‡•á‡§Ç Pass ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

‚úÖ Example 3: bind() (Function ‡§ï‡•ã Future ‡§ï‡•á ‡§≤‡§ø‡§è Bind ‡§ï‡§∞‡§®‡§æ)
javascript
Copy
Edit
const person = { name: "Charlie" };

function sayHello() {
  console.log("Hello, " + this.name);
}

const boundHello = sayHello.bind(person);
boundHello(); // Output: Hello, Charlie
‚úî bind() Function ‡§ï‡•ã Bind ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§§‡•Å‡§∞‡§Ç‡§§ Execute ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§

üéØ Final Summary
Concept	Real-Life Example	JavaScript Use
this	‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§™‡§π‡§ö‡§æ‡§®‡§®‡§æ (Self-Identity)	Object ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á Scope Change ‡§π‡•ã‡§§‡§æ ‡§π‡•à
.then()	Online Order ‡§ï‡§æ Delivery Status	Promise Resolve ‡§π‡•ã‡§®‡•á ‡§™‡§∞ Execute ‡§π‡•ã‡§§‡§æ ‡§π‡•à
call()	‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•Ä ‡§ï‡§æ‡§∞ Borrow ‡§ï‡§∞‡§®‡§æ	‡§ï‡§ø‡§∏‡•Ä Object ‡§ï‡§æ Method ‡§¶‡•Ç‡§∏‡§∞‡•á Object ‡§Æ‡•á‡§Ç Use ‡§ï‡§∞‡§®‡§æ
apply()	‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•Ä ‡§ï‡§æ‡§∞ Borrow ‡§ï‡§∞‡§®‡§æ (Extra Details ‡§ï‡•á ‡§∏‡§æ‡§•)	call() ‡§ú‡•à‡§∏‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® Arguments Array ‡§Æ‡•á‡§Ç
bind()	Future ‡§ï‡•á ‡§≤‡§ø‡§è Driver Fix ‡§ï‡§∞‡§®‡§æ	Function Bind ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® Execute ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ
üî• ‡§Ö‡§¨ ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç JavaScript ‡§ï‡•á ‡§á‡§® Keywords ‡§ï‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡§Æ‡§ù ‡§π‡•ã ‡§ó‡§à ‡§π‡•ã‡§ó‡•Ä!
